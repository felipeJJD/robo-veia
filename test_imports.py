#!/usr/bin/env python3
"""
Script para testar importa√ß√µes e detectar problemas
"""
import os
import sys
import traceback

def test_imports():
    """Testa todas as importa√ß√µes cr√≠ticas"""
    try:
        print("üîç Testando importa√ß√µes...")
        
        # Testar importa√ß√µes b√°sicas
        import os
        print("‚úÖ os")
        
        import asyncio
        print("‚úÖ asyncio")
        
        # Testar FastAPI
        from fastapi import FastAPI
        print("‚úÖ FastAPI")
        
        from fastapi.middleware.cors import CORSMiddleware
        print("‚úÖ CORSMiddleware")
        
        # Testar importa√ß√µes do app
        from app.router import router
        print("‚úÖ app.router")
        
        from app.utils.logger import logger
        print("‚úÖ app.utils.logger")
        
        from app.dispatch import handler_registry
        print("‚úÖ app.dispatch")
        
        from app.handlers.generic import generic_handler
        print("‚úÖ app.handlers.generic")
        
        # Testar handler espec√≠fico baseado no ambiente
        if os.getenv("RAILWAY_ENVIRONMENT") or os.getenv("RAILWAY_PROJECT_ID"):
            from app.handlers.amil_simple import amil_simple_handler
            print("‚úÖ app.handlers.amil_simple (Railway)")
        else:
            try:
                from app.handlers.amil import amil_handler
                print("‚úÖ app.handlers.amil (Local)")
            except ImportError:
                from app.handlers.amil_simple import amil_simple_handler
                print("‚úÖ app.handlers.amil_simple (Fallback)")
        
        print("\nüéâ Todas as importa√ß√µes funcionaram!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erro na importa√ß√£o: {e}")
        print(f"Traceback:\n{traceback.format_exc()}")
        return False

def test_app_creation():
    """Testa cria√ß√£o da aplica√ß√£o FastAPI"""
    try:
        print("\nüîç Testando cria√ß√£o da aplica√ß√£o...")
        from app.main import app
        print("‚úÖ Aplica√ß√£o FastAPI criada com sucesso")
        return True
    except Exception as e:
        print(f"\n‚ùå Erro na cria√ß√£o da aplica√ß√£o: {e}")
        print(f"Traceback:\n{traceback.format_exc()}")
        return False

if __name__ == "__main__":
    print("ü§ñ Robo Veia - Teste de Importa√ß√µes")
    print("=" * 40)
    
    # Mostrar informa√ß√µes do ambiente
    print(f"Python: {sys.version}")
    print(f"Railway Environment: {os.getenv('RAILWAY_ENVIRONMENT', 'Not set')}")
    print(f"Railway Project ID: {os.getenv('RAILWAY_PROJECT_ID', 'Not set')}")
    print(f"PORT: {os.getenv('PORT', 'Not set')}")
    print()
    
    success = True
    
    # Testar importa√ß√µes
    if not test_imports():
        success = False
    
    # Testar cria√ß√£o da aplica√ß√£o
    if not test_app_creation():
        success = False
    
    if success:
        print("\nüéâ Todos os testes passaram! A aplica√ß√£o deve funcionar.")
        sys.exit(0)
    else:
        print("\n‚ùå Alguns testes falharam. Verifique os erros acima.")
        sys.exit(1) 